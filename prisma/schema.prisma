// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN_RT01
  ADMIN_RT02
  ADMIN_RT03
  ADMIN_RT04
  ADMIN_RT05
  ADMIN_RT06
  ADMIN_RT07
  ADMIN_RT08
  ADMIN_RT09
  ADMIN_RT010
  ADMIN_RT011
  SUPER_ADMIN
}

// Pastikan untuk mendefinisikan enum ini jika belum ada
enum JenisKelamin {
  Laki_Laki
  Perempuan
}

enum StatusPerkawinan {
  Belum_Kawin
  Kawin
  Cerai
}

enum StatusWarga {
  Aktif
  Tidak_Aktif
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole? @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}
model RT {
  id      Int       @id @default(autoincrement())
  nomor   String    // Nomor RT
  warga   Warga[]   // Relasi dengan Warga
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warga {
  id                String      @id @default(cuid())
  nik               String?     @unique
  namaLengkap       String      // Wajib
  jenisKelamin      String? // Wajib
  tempatLahir       String?     // Optional
  tanggalLahir      DateTime    // Wajib
  agama             String      // Wajib
  pendidikan        String?     // Optional
  pekerjaan         String?     // Optional
  statusPerkawinan  String? // Optional
  statusWarga       String? // Optional
  rtId              Int?        @db.Integer
  rt                RT?         @relation(fields: [rtId], references: [id])
}